function [par, C, Cx, Cxx] = eqCcycle(x, par);
% ip is the mapping from x to parameter names (see switch below)
% output: C is model prediction of DIP,POP,and DOP
% output: F partial derivative of P model w.r.t. model parameters x
% output: Fxx hessian matrix of P model w.r.t.  model parameters x
    global GC
    on = true; off = false;
    iwet = par.iwet;
    nwet = par.nwet;

    % unpack the parameters to be optimized
    % bC_T
    if (par.opt_bC_T == on)
        par.bC_T = x(par.pindx.bC_T);
    end

    % bC
    if (par.opt_bC == on)
        lbC = x(par.pindx.lbC) ;
        par.bC  = exp(lbC)     ;
    end

    % d
    if (par.opt_d == on)
        ld = x(par.pindx.ld) ;
        par.d = exp(ld)      ;
    end

    % kC_T
    if (par.opt_kC_T == on)
        par.kC_T = x(par.pindx.kC_T);
    end

    % kdC
    if (par.opt_kdC == on)
        lkdC = x(par.pindx.lkdC);
        par.kdC  = exp(lkdC);
    end

    % R_Si
    if (par.opt_R_Si == on)
        par.R_Si = x(par.pindx.R_Si);
    end

    % rR
    if (par.opt_rR == on)
        lrR = x(par.pindx.lrR);
        par.rR = exp(lrR);
    end

    % cc
    if (par.opt_cc)
        lcc = x(par.pindx.lcc);
        par.cc = exp(lcc);
    end

    % dd
    if (par.opt_dd)
        ldd = x(par.pindx.ldd);
        par.dd = exp(ldd);
    end
    %
    options.iprint = 0   ;
    options.atol = 1e-10 ;
    options.rtol = 1e-10 ;
    fprintf('Solving C model ...\n') ;

    X0  = GC;
    [C,ierr] = nsnew(X0,@(X) C_eqn(X, par),options) ;
    par.Cfailure = off ;
    if (ierr ~= 0)
        fprintf('eqCcycle did not converge.\n') ;
        par.Cfailure = on;
        npx  = par.npx   ;
        ncx  = par.ncx   ;
		nbx  = par.nbx   ;
        nx   = npx + ncx + nbx;
        C    = GC ;
        Cx   = sparse(5*par.nwet, nx) ;
        Cxx  = sparse(5*par.nwet, nchoosek(nx,2)+nx) ;
        [par.G,par.Gx,par.Gxx] = uptake_C(par) ;
    elseif (ierr == 0 & par.optim == on)
        % reset the global variable for the next call eqCcycle
        GC = real(C) + 1e-8*randn(5*nwet,1) ;
        X0 = GC;
        F = C_eqn(C, par) ;
        % test if norm of F small enough, if now rerun nsnew;
        if (norm(F) > 1e-12)
            [C,ierr] = nsnew(X0,@(X) C_eqn(X, par),options);
        end
        %
        if nargout > 2
            [F,FD,Cx,Cxx,par] = C_eqn(C, par);
        end
    end
end

function [F,FD,Cx,Cxx,par] = C_eqn(X, par)
% unpack some useful stuff
    on = true; off = false;
    grd   = par.grd   ;
    M3d   = par.M3d   ;
    TRdiv = par.TRdiv ;
    iwet  = par.iwet  ;
    nwet  = par.nwet  ;
    dVt   = par.dVt   ;
    I     = par.I     ;

    Tz  = par.Tz ;
    DIC = X(0*nwet+1:1*nwet) ;
    POC = X(1*nwet+1:2*nwet) ;
    DOC = X(2*nwet+1:3*nwet) ;
    PIC = X(3*nwet+1:4*nwet) ;
    ALK = X(4*nwet+1:5*nwet) ;

    PO4 = par.po4obs(iwet) ;
    % fixed parameters
    kappa_p = par.kappa_p  ;
    kPIC    = par.kPIC     ;
    % parameters need to be optimized
    alpha = par.alpha    ;
    beta  = par.beta     ;
    sigma = par.sigma    ;
    bC_T  = par.bC_T     ;
    bC    = par.bC       ;
    d     = par.d        ;
    kC_T  = par.kC_T     ;
    kdC   = par.kdC      ;
    R_Si  = par.R_Si     ;
    rR    = par.rR       ;
    cc    = par.cc       ;
    dd    = par.dd       ;
    pme   = par.pme      ;
    % PIC to POC rain ratio
    vout  = mkPIC2P(par) ;
    RR    = vout.RR      ;
    RR_Si = vout.RR_Si   ;
    RR_rR = vout.RR_rR   ;
    clear vout
    % kappa_dc ;
    kC    = d0(kC_T * Tz + kdC) ;

	% Stoichiometric ratios
	if isfield(par,'CellOut')
		C2P = par.CellOut.C2P(iwet);
		%N2C = 1./par.CellOut.C2N(iwet);
		N2C   = 16/117 ;
		%fprintf('Using Cell Model Output for C2P \n')
	else
		C2P = 1./(cc*PO4 + dd);
		N2C   = 16/117 ;
		fprintf('Using Linear function of po4obs for C:P and constant N:C')
	end
    par.C2P = C2P  ;

    % particle flux div_rergence [s^-1];
    PFDa = buildPFD(par,'PIC') ;
    PFDc = buildPFD(par,'POC') ;
    par.PFDa = PFDa ;
    par.PFDc = PFDc ;
    par.DIC  = DIC  ;
    par.ALK  = ALK  ;
    % Air-Sea gas exchange
    vout  = Fsea2air(par, 'CO2');
    G_dic = vout.G_dic ;
    G_alk = vout.G_alk ;
    JgDIC = vout.JgDIC ;
    clear vout
    % biological DIC uptake operator
    G = uptake_C(par)  ; par.G = G ;

    kappa_g = par.kappa_g ;
    ALKbar  = par.ALKbar  ;
    sDICbar = par.sDICbar ;
    sALKbar = par.sALKbar ;

    eq1 = (I+(1-sigma)*RR)*(G*C2P) + TRdiv*DIC - kC*DOC - kPIC*PIC ...
          - JgDIC + pme*sDICbar ;
    eq2 = -(1-sigma)*G*C2P + (PFDc+kappa_p*I)*POC     ;
    eq3 = -sigma*G*C2P + (TRdiv+kC)*DOC - kappa_p*POC ;
    eq4 = -(1-sigma)*RR*(G*C2P) + (PFDa+kPIC*I)*PIC   ;
    eq5 = 2*(1-sigma)*RR*(G*C2P) + TRdiv*ALK - N2C.*(G*C2P) + N2C.*(kC*DOC) ...
          - 2*kPIC*PIC - kappa_g*(ALK - ALKbar) + pme*sALKbar ;

    F   = [eq1; eq2; eq3; eq4; eq5];

    if nargout > 1
        % construct the LHS matrix for the offline model
        % disp('Preparing LHS and RHS matrix:')
        % colum 1 dFdDIC
        Jc{1,1} = TRdiv - G_dic ;
        Jc{2,1} = 0*I ;
        Jc{3,1} = 0*I ;
        Jc{4,1} = 0*I ;
        Jc{5,1} = 0*I ;
        % colum 2 dFdPOC
        Jc{1,2} = 0*I ;
        Jc{2,2} = PFDc + kappa_p*I ;
        Jc{3,2} = -kappa_p*I ;
        Jc{4,2} = 0*I ;
        Jc{5,2} = 0*I ;
        % colum 3 dFdDOC
        Jc{1,3} = -kC ;
        Jc{2,3} = 0*I ;
        Jc{3,3} = TRdiv + kC ;
        Jc{4,3} = 0*I ;
        Jc{5,3} = N2C*kC ;
        % colum 4 dFdPIC
        Jc{1,4} = -kPIC*I ;
        Jc{2,4} = 0*I ;
        Jc{3,4} = 0*I ;
        Jc{4,4} = PFDa + kPIC*I ;
        Jc{5,4} = -2*kPIC*I ;
        % column 5 dFdALK
        Jc{1,5} = -G_alk ;
        Jc{2,5} = 0*I ;
        Jc{3,5} = 0*I ;
        Jc{4,5} = 0*I ;
        Jc{5,5} = TRdiv - kappa_g*I ;
        % factorize Jacobian matrix
        FD = mfactor(cell2mat(Jc)) ;
    end

    if (par.optim == off)
        Cx = [];
    elseif (par.optim & nargout > 2)
        pindx = par.pindx ;
        Z = sparse(nwet,1);
        C2P_cc = -PO4./(cc*PO4 + dd).^2;
        C2P_dd = -1./(cc*PO4 + dd).^2;
        par.C2P_cc = C2P_cc;
        par.C2P_dd = C2P_dd;
        [~,Gx] = uptake_C(par);
        par.Gx = Gx;
        npx    = par.npx;
        % P model parameters
        % sigma
        if (par.opt_sigma == on)
            tmp = [sigma*RR*G*C2P  ; ...
                   -sigma*G*C2P    ; ...
                   sigma*G*C2P     ; ...
                   -sigma*RR*G*C2P ; ...
                   2*sigma*RR*G*C2P] + ...
                  [-d0((I+(1-sigma)*RR)*Gx(:,pindx.lsigma))*C2P; ...
                   (1-sigma)*d0(Gx(:,pindx.lsigma))*C2P; ...
                   sigma*d0(Gx(:,pindx.lsigma))*C2P; ...
                   d0((1-sigma)*RR*Gx(:,pindx.lsigma))*C2P; ...
                   d0(-2*(1-sigma)*RR*Gx(:,pindx.lsigma))*C2P + ...
                   d0(N2C*Gx(:,pindx.lsigma))*C2P] ;

            Cx(:,pindx.lsigma) = mfactor(FD, tmp)  ;
        end

        % kP_T
        if (par.opt_kP_T == on)
            tmp = [-d0((I+(1-sigma)*RR)*Gx(:,pindx.kP_T))*C2P; ...
                   (1-sigma)*d0(Gx(:,pindx.kP_T))*C2P; ...
                   sigma*d0(Gx(:,pindx.kP_T))*C2P; ...
                   d0((1-sigma)*RR*Gx(:,pindx.kP_T))*C2P; ...
                   d0(-2*(1-sigma)*RR*Gx(:,pindx.kP_T))*C2P + ...
                   d0(N2C*Gx(:,pindx.kP_T))*C2P];

            Cx(:,pindx.kP_T) = mfactor(FD, tmp);
        end

        % kdP
        if (par.opt_kdP == on)
            tmp = [-d0((I+(1-sigma)*RR)*Gx(:,pindx.lkdP))*C2P; ...
                   (1-sigma)*d0(Gx(:,pindx.lkdP))*C2P; ...
                   sigma*d0(Gx(:,pindx.lkdP))*C2P; ...
                   d0((1-sigma)*RR*Gx(:,pindx.lkdP))*C2P; ...
                   d0(-2*(1-sigma)*RR*Gx(:,pindx.lkdP))*C2P + ...
                   d0(N2C*Gx(:,pindx.lkdP))*C2P];

            Cx(:,pindx.lkdP) = mfactor(FD, tmp);
        end

        % bP_T
        if (par.opt_bP_T == on)
            tmp = [-d0((I+(1-sigma)*RR)*Gx(:,pindx.bP_T))*C2P; ...
                   (1-sigma)*d0(Gx(:,pindx.bP_T))*C2P; ...
                   sigma*d0(Gx(:,pindx.bP_T))*C2P; ...
                   d0((1-sigma)*RR*Gx(:,pindx.bP_T))*C2P; ...
                   d0(-2*(1-sigma)*RR*Gx(:,pindx.bP_T))*C2P + ...
                   d0(N2C*Gx(:,pindx.bP_T))*C2P];

            Cx(:,pindx.bP_T) = mfactor(FD, tmp);
        end

        % bP
        if (par.opt_bP == on)
            tmp = [-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbP))*C2P;...
                   (1-sigma)*d0(Gx(:,pindx.lbP))*C2P;...
                   sigma*d0(Gx(:,pindx.lbP))*C2P;...
                   d0((1-sigma)*RR*Gx(:,pindx.lbP))*C2P; ...
                   d0(-2*(1-sigma)*RR*Gx(:,pindx.lbP))*C2P + ...
                   d0(N2C*Gx(:,pindx.lbP))*C2P];

            Cx(:,pindx.lbP) = mfactor(FD, tmp);
        end

        % alpha
        if (par.opt_alpha == on)
            tmp = [-d0((I+(1-sigma)*RR)*Gx(:,pindx.lalpha))*C2P; ...
                   (1-sigma)*d0(Gx(:,pindx.lalpha))*C2P; ...
                   sigma*d0(Gx(:,pindx.lalpha))*C2P; ...
                   d0((1-sigma)*RR*Gx(:,pindx.lalpha))*C2P; ...
                   d0(-2*(1-sigma)*RR*Gx(:,pindx.lalpha))*C2P + ...
                   d0(N2C*Gx(:,pindx.lalpha))*C2P];

            Cx(:,pindx.lalpha) = mfactor(FD, tmp);
        end

        % beta
        if (par.opt_beta == on)
            tmp = [-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbeta))*C2P;...
                   (1-sigma)*d0(Gx(:,pindx.lbeta))*C2P;...
                   sigma*d0(Gx(:,pindx.lbeta))*C2P;...
                   d0((1-sigma)*RR*Gx(:,pindx.lbeta))*C2P; ...
                   d0(-2*(1-sigma)*RR*Gx(:,pindx.lbeta))*C2P + ...
                   d0(N2C*Gx(:,pindx.lbeta))*C2P];

            Cx(:,pindx.lbeta) = mfactor(FD, tmp);
        end
        % -------------------- C parameters ------------------
        % bC_T
        if (par.opt_bC_T == on)
            [~,Gout]   = buildPFD(par,'POC');
            PFD_bm     = Gout.PFD_bm;
            par.PFD_bm = PFD_bm;
            tmp = [Z; -PFD_bm*POC; Z;  Z; Z];

            Cx(:,pindx.bC_T) = mfactor(FD, tmp);
        end

        % bC
        if (par.opt_bC == on)
            [~,Gout]   = buildPFD(par,'POC');
            PFD_bb     = Gout.PFD_bb;
            par.PFD_bb = PFD_bb;
            tmp = bC*[Z; -PFD_bb*POC; Z; Z; Z];

            Cx(:,pindx.lbC) = mfactor(FD, tmp);
        end

        % d
        if (par.opt_d == on)
            [~,Gout]  = buildPFD(par,'PIC');
            PFD_d     = Gout.PFD_d;
            par.PFD_d = PFD_d;
            tmp = d*[Z; Z; Z; -PFD_d*PIC; Z];

            Cx(:,pindx.ld) = mfactor(FD, tmp);
        end

        % kC_T
        if (par.opt_kC_T == on)
            kC_kC_T     = d0(Tz) ;
            par.kC_kC_T = kC_kC_T ;
            tmp = [kC_kC_T*DOC; ...
                   Z; ...
                   -kC_kC_T*DOC; ...
                   Z; ...
                   -N2C*kC_kC_T*DOC];

            Cx(:,pindx.kC_T) = mfactor(FD, tmp);
        end

        % kdC
        if (par.opt_kdC == on)
            kC_kdC     = kdC ;
            par.kC_kdC = kC_kdC;
            tmp = kC_kdC*[DOC; Z; -DOC; Z; -N2C*DOC];

            Cx(:,pindx.lkdC) = mfactor(FD, tmp);
        end

        % R_Si
        if (par.opt_R_Si == on)
            tmp = [-(1-sigma)*RR_Si*(G*C2P); ...
                   Z; ...
                   Z; ...
                   (1-sigma)*RR_Si*(G*C2P); ...
                   -2*(1-sigma)*RR_Si*(G*C2P)];

            Cx(:,pindx.R_Si) = mfactor(FD, tmp);
        end

        % rR
        if (par.opt_rR == on)
            tmp = [-(1-sigma)*RR_rR*(G*C2P); ...
                   Z; ...
                   Z; ...
                   (1-sigma)*RR_rR*(G*C2P); ...
                   -2*(1-sigma)*RR_rR*(G*C2P)];

            Cx(:,pindx.lrR) = mfactor(FD, tmp);
        end

        % cc
        if (par.opt_cc == on)
            tmp = cc*[-(I+(1-sigma)*RR)*(G*C2P_cc); ...
                      (1-sigma)*G*C2P_cc; ...
                      sigma*G*C2P_cc; ...
                      (1-sigma)*RR*(G*C2P_cc); ...
                      -2*(1-sigma)*RR*(G*C2P_cc) + ...
                      N2C*G*C2P_cc];

            Cx(:,pindx.lcc) = mfactor(FD, tmp);
        end

        % dd
        if (par.opt_dd == on)
            tmp = dd*[-(I+(1-sigma)*RR)*(G*C2P_dd); ...
                      (1-sigma)*G*C2P_dd; ...
                      sigma*G*C2P_dd; ...
                      (1-sigma)*RR*(G*C2P_dd); ...
                      -2*(1-sigma)*RR*(G*C2P_dd) + ...
                      N2C*G*C2P_dd];

            Cx(:,pindx.ldd) = mfactor(FD, tmp);
        end

		% -------------------- CellModel parameters ------------------
		%  Q10Photo
		if (par.opt_Q10Photo == on)
        	C2P_Q10 = par.CellOut.dC2P_dQ10Photo(iwet);
			tmp = par.BIO.Q10Photo*[-(I+(1-sigma)*RR)*(G*C2P_Q10); ...
                      (1-sigma)*G*C2P_Q10; ...
                      sigma*G*C2P_Q10; ...
                      (1-sigma)*RR*(G*C2P_Q10); ...
                      -2*(1-sigma)*RR*(G*C2P_Q10) + ...
                      N2C*G*C2P_Q10];
        	Cx(:,pindx.lQ10Photo) = mfactor(FD, tmp);
    	end
		%  fStorage
		if (par.opt_fStorage == on)
        	C2P_fStor = par.CellOut.dC2P_dfStorage(iwet);
			tmp = par.BIO.Q10Photo*[-(I+(1-sigma)*RR)*(G*C2P_fStor); ...
                      (1-sigma)*G*C2P_fStor; ...
                      sigma*G*C2P_fStor; ...
                      (1-sigma)*RR*(G*C2P_fStor); ...
                      -2*(1-sigma)*RR*(G*C2P_fStor) + ...
                      N2C*G*C2P_fStor];
        	Cx(:,pindx.lfStorage) = mfactor(FD, tmp);
    	end
    end %  end Jacobian

    if (par.optim == off)
        Cxx = [];
    elseif (par.optim & nargout > 3);
        p2c       = cc*PO4 + dd;
        C2P_dd_dd = 2./p2c.^3;
        C2P_cc_cc = (2*PO4.^2)./p2c.^3;
        C2P_cc_dd = (2*PO4)./p2c.^3;
		if (par.Cellmodel & par.opt_Q10Photo)
			C2P_Q10 = par.CellOut.dC2P_dQ10Photo(iwet);
		end
		if (par.Cellmodel & par.opt_fStorage)
			C2P_fStor = par.CellOut.dC2P_dfStorage(iwet);
		end
        [~,~,Gxx] = uptake_C(par);
        par.Gxx   = Gxx;
        DICx = Cx(0*nwet+1:1*nwet,:);
        POCx = Cx(1*nwet+1:2*nwet,:);
        DOCx = Cx(2*nwet+1:3*nwet,:);
        PICx = Cx(3*nwet+1:4*nwet,:);
        ALKx = Cx(4*nwet+1:5*nwet,:);
        % ------------------------------------------------------
        % P model only parameters
        kk = 0;
        for jj = 1:npx
            for jk = jj:npx
                kk = kk + 1;
                if (par.opt_sigma == on)
                    % sigma sigma
                    if (jj == jk & jj == pindx.lsigma)
                        tmp = sigma*[RR*G*C2P + 2*d0(RR*Gx(:,jj))*C2P; ...
                                     -G*C2P - 2*d0(Gx(:,jj))*C2P;...
                                      G*C2P + 2*d0(Gx(:,jj))*C2P;...
                                     -RR*G*C2P - 2*d0(RR*Gx(:,jj))*C2P; ...
                                     2*RR*G*C2P + 2*2*d0(RR*Gx(:,jj))*C2P] + ...
                              [-d0((I+(1-sigma)*RR)*Gxx(:,kk))*C2P; ...
                               (1-sigma)*d0(Gxx(:,kk))*C2P; ...
                               sigma*d0(Gxx(:,kk))*C2P; ...
                               d0((1-sigma)*RR*Gxx(:,kk))*C2P; ...
                               d0(-2*(1-sigma)*RR*Gxx(:,kk))*C2P + ...
                               d0(N2C*Gxx(:,kk))*C2P];

                        Cxx(:,kk) = mfactor(FD, tmp);
                        %pairs not assciated with sigma;
                    elseif (jj ~= pindx.lsigma & jk ~= pindx.lsigma)
                        tmp = [-d0((I+(1-sigma)*RR)*Gxx(:,kk))*C2P; ...
                               (1-sigma)*d0(Gxx(:,kk))*C2P; ...
                               sigma*d0(Gxx(:,kk))*C2P; ...
                               d0((1-sigma)*RR*Gxx(:,kk))*C2P; ...
                               d0(-2*(1-sigma)*RR*Gxx(:,kk))*C2P + ...
                               d0(N2C*Gxx(:,kk))*C2P];

                        Cxx(:,kk) = mfactor(FD, tmp);

                    else
                        tmp = [RR*sigma*d0(Gx(:,jk))*C2P; ...
                               -sigma*d0(Gx(:,jk))*C2P; ...
                               sigma*d0(Gx(:,jk))*C2P; ...
                               -RR*sigma*d0(Gx(:,jk))*C2P; ...
                               2*RR*sigma*d0(Gx(:,jk))*C2P] + ...
                              [-d0((I+(1-sigma)*RR)*Gxx(:,kk))*C2P; ...
                               (1-sigma)*d0(Gxx(:,kk))*C2P; ...
                               sigma*d0(Gxx(:,kk))*C2P; ...
                               d0((1-sigma)*RR*Gxx(:,kk))*C2P;...
                               d0(-2*(1-sigma)*RR*Gxx(:,kk))*C2P + ...
                               d0(N2C*Gxx(:,kk))*C2P];

                        Cxx(:,kk) = mfactor(FD, tmp);
                    end
                else
                    tmp = [-d0((I+(1-sigma)*RR)*Gxx(:,kk))*C2P; ...
                           (1-sigma)*d0(Gxx(:,kk))*C2P; ...
                           sigma*d0(Gxx(:,kk))*C2P; ...
                           d0((1-sigma)*RR*Gxx(:,kk))*C2P; ...
                           d0(-2*(1-sigma)*RR*Gxx(:,kk))*C2P + ...
                           d0(N2C*Gxx(:,kk))*C2P];

                    Cxx(:,kk) = mfactor(FD, tmp);
                    % sigma foo
                end
            end
        end
        % ------------------------------------------------------
        % P and  C model parameters
        % sigma bC_T
        if (par.opt_sigma & par.opt_bC_T)
            kk  = kk + 1;
            tmp =  [Z; ...
                    -PFD_bm*POCx(:,pindx.lsigma) ; ...
                    Z; ...
                    Z; ...
                    Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % sigma bC
        if (par.opt_sigma & par.opt_bC)
            kk = kk + 1;
            tmp =  [Z ; ...
                    -bC*PFD_bb*POCx(:,pindx.lsigma); ...
                    Z ; ...
                    Z ; ...
                    Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % sigma d
        if (par.opt_sigma & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lsigma); ...
                   Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % sigma kC_T
        if (par.opt_sigma & par.opt_kC_T)
            kk  = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lsigma); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lsigma); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lsigma)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % sigma kdC
        if (par.opt_sigma & par.opt_kdC)
            kk  = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.lsigma); ...
                   Z; ...
                   -kC_kdC*DOCx(:,pindx.lsigma); ...
                   Z; ...
                   -N2C*kC_kdC*DOCx(:,pindx.lsigma)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % sigma R_Si
        if (par.opt_sigma & par.opt_R_Si)
            kk = kk + 1;
            tmp = [sigma*RR_Si*G*C2P ; ...
                   Z ; ...
                   Z ; ...
                   -sigma*RR_Si*G*C2P; ...
                   2*sigma*RR_Si*G*C2P] + ...
                  [-d0((1-sigma)*RR_Si*Gx(:,pindx.lsigma))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_Si*Gx(:,pindx.lsigma))*C2P; ...
                   d0(-2*(1-sigma)*RR_Si*Gx(:,pindx.lsigma))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % sigma rR
        if (par.opt_sigma & par.opt_rR)
            kk = kk + 1;
            tmp = [sigma*RR_rR*G*C2P ; ...
                   Z ; ...
                   Z ; ...
                   -sigma*RR_rR*G*C2P; ...
                   2*sigma*RR_rR*G*C2P] + ...
                  [-d0((1-sigma)*RR_rR*Gx(:,pindx.lsigma))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_rR*Gx(:,pindx.lsigma))*C2P; ...
                   d0(-2*(1-sigma)*RR_rR*Gx(:,pindx.lsigma))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % sigma cc
        if (par.opt_sigma & par.opt_cc)
            kk  = kk + 1;
            tmp = cc*[RR*sigma*G*C2P_cc; ...
                      -sigma*G*C2P_cc; ...
                      sigma*G*C2P_cc; ...
                      -RR*sigma*G*C2P_cc; ...
                      2*RR*sigma*G*C2P_cc] + ...
                  cc*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lsigma))*C2P_cc; ...
                      (1-sigma)*d0(Gx(:,pindx.lsigma))*C2P_cc; ...
                      sigma*d0(Gx(:,pindx.lsigma))*C2P_cc; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lsigma))*C2P_cc; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lsigma))*C2P_cc + ...
                      d0(N2C*Gx(:,pindx.lsigma))*C2P_cc];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % sigma dd
        if (par.opt_sigma & par.opt_dd)
            kk  = kk + 1;
            tmp = dd*[RR*sigma*G*C2P_dd; ...
                      -sigma*G*C2P_dd; ...
                      sigma*G*C2P_dd; ...
                      -RR*sigma*G*C2P_dd; ...
                      2*RR*sigma*G*C2P_dd] + ...
                  dd*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lsigma))*C2P_dd; ...
                      (1-sigma)*d0(Gx(:,pindx.lsigma))*C2P_dd; ...
                      sigma*d0(Gx(:,pindx.lsigma))*C2P_dd; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lsigma))*C2P_dd; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lsigma))*C2P_dd + ...
                      d0(N2C*Gx(:,pindx.lsigma))*C2P_dd];

            Cxx(:,kk) = mfactor(FD, tmp);
        end
 % sigma + Cell model params
		% sigma Q10Photo
    	if (par.opt_sigma & par.opt_Q10Photo)
        	kk = kk + 1;
			tmp = par.BIO.Q10Photo*[RR*sigma*G*C2P_Q10; ...
                      -sigma*G*C2P_Q10; ...
                      sigma*G*C2P_Q10; ...
                      -RR*sigma*G*C2P_Q10; ...
                      2*RR*sigma*G*C2P_Q10] + ...
                  par.BIO.Q10Photo*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lsigma))*C2P_Q10; ...
                      (1-sigma)*d0(Gx(:,pindx.lsigma))*C2P_Q10; ...
                      sigma*d0(Gx(:,pindx.lsigma))*C2P_Q10; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lsigma))*C2P_Q10; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lsigma))*C2P_Q10 + ...
                      d0(N2C*Gx(:,pindx.lsigma))*C2P_Q10];

        	Cxx(:,kk) = mfactor(FD, tmp);
    	end

		if (par.opt_sigma & par.opt_fStorage)
        	kk = kk + 1;
			tmp = par.BIO.fStorage*[RR*sigma*G*C2P_fStor; ...
                      -sigma*G*C2P_fStor; ...
                      sigma*G*C2P_fStor; ...
                      -RR*sigma*G*C2P_fStor; ...
                      2*RR*sigma*G*C2P_fStor] + ...
                  par.BIO.fStorage*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lsigma))*C2P_fStor; ...
                      (1-sigma)*d0(Gx(:,pindx.lsigma))*C2P_fStor; ...
                      sigma*d0(Gx(:,pindx.lsigma))*C2P_fStor; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lsigma))*C2P_fStor; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lsigma))*C2P_fStor + ...
                      d0(N2C*Gx(:,pindx.lsigma))*C2P_fStor];

        	Cxx(:,kk) = mfactor(FD, tmp);
    	end
%kP_T
        % kP_T bC_T
        if (par.opt_kP_T & par.opt_bC_T)
            kk  = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.kP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kP_T bC
        if (par.opt_kP_T & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.kP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kP_T d
        if (par.opt_kP_T & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.kP_T); ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kP_T kC_T
        if (par.opt_kP_T & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.kP_T); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.kP_T); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.kP_T)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kP_T kdC
        if (par.opt_kP_T & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.kP_T); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.kP_T); ...
                   Z ; ...
                   -N2C*kC_kdC*DOCx(:,pindx.kP_T)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kP_T R_Si
        if (par.opt_kP_T & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigma)*RR_Si*Gx(:,pindx.kP_T))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_Si*Gx(:,pindx.kP_T))*C2P; ...
                   d0(-2*(1-sigma)*RR_Si*Gx(:,pindx.kP_T))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kP_T RR_rR
        if (par.opt_kP_T & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigma)*RR_rR*Gx(:,pindx.kP_T))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_rR*Gx(:,pindx.kP_T))*C2P; ...
                   d0(-2*(1-sigma)*RR_rR*Gx(:,pindx.kP_T))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kP_T cc
        if (par.opt_kP_T & par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.kP_T))*C2P_cc; ...
                      (1-sigma)*d0(Gx(:,pindx.kP_T))*C2P_cc; ...
                      sigma*d0(Gx(:,pindx.kP_T))*C2P_cc; ...
                      d0((1-sigma)*RR*Gx(:,pindx.kP_T))*C2P_cc; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.kP_T))*C2P_cc + ...
                      d0(N2C*Gx(:,pindx.kP_T))*C2P_cc];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kP_T dd
        if (par.opt_kP_T & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.kP_T))*C2P_dd; ...
                      (1-sigma)*d0(Gx(:,pindx.kP_T))*C2P_dd; ...
                      sigma*d0(Gx(:,pindx.kP_T))*C2P_dd; ...
                      d0((1-sigma)*RR*Gx(:,pindx.kP_T))*C2P_dd; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.kP_T))*C2P_dd + ...
                      d0(N2C*Gx(:,pindx.kP_T))*C2P_dd];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

	% kP_T + cell model
		% kP_T Q10Photo
		if (par.opt_kP_T & par.opt_Q10Photo)
			kk = kk + 1;
            tmp = par.BIO.Q10Photo*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.kP_T))*C2P_Q10; ...
                      (1-sigma)*d0(Gx(:,pindx.kP_T))*C2P_Q10; ...
                      sigma*d0(Gx(:,pindx.kP_T))*C2P_Q10; ...
                      d0((1-sigma)*RR*Gx(:,pindx.kP_T))*C2P_Q10; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.kP_T))*C2P_Q10 + ...
                      d0(N2C*Gx(:,pindx.kP_T))*C2P_Q10];

            Cxx(:,kk) = mfactor(FD, tmp);
		end

		% kP_T fStorage
		if (par.opt_kP_T & par.opt_fStorage)
			kk = kk + 1;
            tmp = par.BIO.fStorage*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.kP_T))*C2P_fStor; ...
                      (1-sigma)*d0(Gx(:,pindx.kP_T))*C2P_fStor; ...
                      sigma*d0(Gx(:,pindx.kP_T))*C2P_fStor; ...
                      d0((1-sigma)*RR*Gx(:,pindx.kP_T))*C2P_fStor; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.kP_T))*C2P_fStor + ...
                      d0(N2C*Gx(:,pindx.kP_T))*C2P_fStor];

            Cxx(:,kk) = mfactor(FD, tmp);
		end

        % kdP bC_T
        if (par.opt_kdP & par.opt_bC_T)
            kk = kk + 1;
            tmp =  [Z; ...
                    -PFD_bm*POCx(:,pindx.lkdP); ...
                    Z; ...
                    Z; ...
                    Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdP bC
        if (par.opt_kdP & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lkdP); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdP d
        if (par.opt_kdP & par.opt_d)
            kk = kk + 1;
            tmp = [Z; ...
                   Z; ...
                   Z; ...
                   -d*PFD_d*PICx(:,pindx.lkdP); ...
                   Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdP kC_T
        if (par.opt_kdP & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lkdP)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdP kdC
        if (par.opt_kdP & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lkdP); ...
                   Z; ...
                   -N2C*kC_kdC*DOCx(:,pindx.lkdP)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdP R_Si
        if (par.opt_kdP & par.opt_R_Si)
            kk  = kk + 1;
            tmp = [-d0((1-sigma)*RR_Si*Gx(:,pindx.lkdP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_Si*Gx(:,pindx.lkdP))*C2P; ...
                   d0(-2*(1-sigma)*RR_Si*Gx(:,pindx.lkdP))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdP rR
        if (par.opt_kdP & par.opt_rR)
            kk  = kk + 1;
            tmp = [-d0((1-sigma)*RR_rR*Gx(:,pindx.lkdP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_rR*Gx(:,pindx.lkdP))*C2P; ...
                   d0(-2*(1-sigma)*RR_rR*Gx(:,pindx.lkdP))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdP cc
        if (par.opt_kdP & par.opt_cc)
            kk  = kk + 1;
            tmp = cc*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lkdP))*C2P_cc; ...
                      (1-sigma)*d0(Gx(:,pindx.lkdP))*C2P_cc; ...
                      sigma*d0(Gx(:,pindx.lkdP))*C2P_cc; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lkdP))*C2P_cc; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lkdP))*C2P_cc + ...
                      d0(N2C*Gx(:,pindx.lkdP))*C2P_cc];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdP dd
        if (par.opt_kdP & par.opt_dd)
            kk  = kk + 1;
            tmp = dd*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lkdP))*C2P_dd; ...
                      (1-sigma)*d0(Gx(:,pindx.lkdP))*C2P_dd; ...
                      sigma*d0(Gx(:,pindx.lkdP))*C2P_dd; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lkdP))*C2P_dd; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lkdP))*C2P_dd + ...
                      d0(N2C*Gx(:,pindx.lkdP))*C2P_dd];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

	% kdP + cell model
		% kdP Q10Photo
		if (par.opt_kdP & par.opt_Q10Photo)
			kk = kk + 1;
			tmp = par.BIO.Q10Photo*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lkdP))*C2P_Q10; ...
                      (1-sigma)*d0(Gx(:,pindx.lkdP))*C2P_Q10; ...
                      sigma*d0(Gx(:,pindx.lkdP))*C2P_Q10; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lkdP))*C2P_Q10; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lkdP))*C2P_Q10 + ...
                      d0(N2C*Gx(:,pindx.lkdP))*C2P_Q10];

            Cxx(:,kk) = mfactor(FD, tmp);
		end

		%kdP fStorage
		if (par.opt_kdP & par.opt_fStorage)
			kk = kk + 1;
			tmp = par.BIO.fStorage*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lkdP))*C2P_fStor; ...
                      (1-sigma)*d0(Gx(:,pindx.lkdP))*C2P_fStor; ...
                      sigma*d0(Gx(:,pindx.lkdP))*C2P_fStor; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lkdP))*C2P_fStor; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lkdP))*C2P_fStor + ...
                      d0(N2C*Gx(:,pindx.lkdP))*C2P_fStor];

            Cxx(:,kk) = mfactor(FD, tmp);
		end
%
        % bP_T bC_T
        if (par.opt_bP_T & par.opt_bC_T)
            kk  = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP_T bC
        if (par.opt_bP_T & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP_T d
        if (par.opt_bP_T & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.bP_T); ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP_T kC_T
        if (par.opt_bP_T & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.bP_T)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP_T kdC
        if (par.opt_bP_T & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   -N2C*kC_kdC*DOCx(:,pindx.bP_T)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP_T R_Si
        if (par.opt_bP_T & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigma)*RR_Si*Gx(:,pindx.bP_T))*C2P ; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_Si*Gx(:,pindx.bP_T))*C2P ; ...
                   d0(-2*(1-sigma)*RR_Si*Gx(:,pindx.bP_T))*C2P] ;

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP_T rR
        if (par.opt_bP_T & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigma)*RR_rR*Gx(:,pindx.bP_T))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_rR*Gx(:,pindx.bP_T))*C2P; ...
                   d0(-2*(1-sigma)*RR_rR*Gx(:,pindx.bP_T))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP_T cc
        if (par.opt_bP_T & par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.bP_T))*C2P_cc; ...
                      (1-sigma)*d0(Gx(:,pindx.bP_T))*C2P_cc; ...
                      sigma*d0(Gx(:,pindx.bP_T))*C2P_cc; ...
                      d0((1-sigma)*RR*Gx(:,pindx.bP_T))*C2P_cc; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.bP_T))*C2P_cc + ...
                      d0(N2C*Gx(:,pindx.bP_T))*C2P_cc];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP_T dd
        if (par.opt_bP_T & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.bP_T))*C2P_dd; ...
                      (1-sigma)*d0(Gx(:,pindx.bP_T))*C2P_dd; ...
                      sigma*d0(Gx(:,pindx.bP_T))*C2P_dd; ...
                      d0((1-sigma)*RR*Gx(:,pindx.bP_T))*C2P_dd; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.bP_T))*C2P_dd + ...
                      d0(N2C*Gx(:,pindx.bP_T))*C2P_dd];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

	% bP_T + cell model
		% bP_T Q10Photo
		if (par.opt_bP_T & par.opt_Q10Photo)
			kk = kk + 1;
			tmp = par.BIO.Q10Photo*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.bP_T))*C2P_Q10; ...
                      (1-sigma)*d0(Gx(:,pindx.bP_T))*C2P_Q10; ...
                      sigma*d0(Gx(:,pindx.bP_T))*C2P_Q10; ...
                      d0((1-sigma)*RR*Gx(:,pindx.bP_T))*C2P_Q10; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.bP_T))*C2P_Q10 + ...
                      d0(N2C*Gx(:,pindx.bP_T))*C2P_Q10];

            Cxx(:,kk) = mfactor(FD, tmp);
		end
		% bP_T Q10Photo
		if (par.opt_bP_T & par.opt_fStorage)
			kk = kk + 1;
			tmp = par.BIO.fStorage*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.bP_T))*C2P_fStor; ...
                      (1-sigma)*d0(Gx(:,pindx.bP_T))*C2P_fStor; ...
                      sigma*d0(Gx(:,pindx.bP_T))*C2P_fStor; ...
                      d0((1-sigma)*RR*Gx(:,pindx.bP_T))*C2P_fStor; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.bP_T))*C2P_fStor + ...
                      d0(N2C*Gx(:,pindx.bP_T))*C2P_fStor];

            Cxx(:,kk) = mfactor(FD, tmp);
		end
%bP
        % bP bC_T
        if (par.opt_bP & par.opt_bC_T)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP bC
        if (par.opt_bP & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP d
        if (par.opt_bP & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lbP); ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP kC_T
        if (par.opt_bP & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lbP)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP kdC
        if (par.opt_bP & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   -N2C*kC_kdC*DOCx(:,pindx.lbP)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP R_Si
        if (par.opt_bP & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigma)*RR_Si*Gx(:,pindx.lbP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_Si*Gx(:,pindx.lbP))*C2P; ...
                   d0(-2*(1-sigma)*RR_Si*Gx(:,pindx.lbP))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP rR
        if (par.opt_bP & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigma)*RR_rR*Gx(:,pindx.lbP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_rR*Gx(:,pindx.lbP))*C2P; ...
                   d0(-2*(1-sigma)*RR_rR*Gx(:,pindx.lbP))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP cc
        if (par.opt_bP & par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbP))*C2P_cc; ...
                      (1-sigma)*d0(Gx(:,pindx.lbP))*C2P_cc;...
                      sigma*d0(Gx(:,pindx.lbP))*C2P_cc;...
                      d0((1-sigma)*RR*Gx(:,pindx.lbP))*C2P_cc; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lbP))*C2P_cc + ...
                      d0(N2C*Gx(:,pindx.lbP))*C2P_cc];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bP dd
        if (par.opt_bP & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbP))*C2P_dd; ...
                      (1-sigma)*d0(Gx(:,pindx.lbP))*C2P_dd;...
                      sigma*d0(Gx(:,pindx.lbP))*C2P_dd;...
                      d0((1-sigma)*RR*Gx(:,pindx.lbP))*C2P_dd; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lbP))*C2P_dd + ...
                      d0(N2C*Gx(:,pindx.lbP))*C2P_dd];

            Cxx(:,kk) = mfactor(FD, tmp);
        end
	% bP + Cell model
		% bP Q10Photo
		if (par.opt_bP & par.opt_Q10Photo)
			kk = kk + 1;
            tmp = par.BIO.Q10Photo*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbP))*C2P_Q10; ...
                      (1-sigma)*d0(Gx(:,pindx.lbP))*C2P_Q10;...
                      sigma*d0(Gx(:,pindx.lbP))*C2P_Q10;...
                      d0((1-sigma)*RR*Gx(:,pindx.lbP))*C2P_Q10; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lbP))*C2P_Q10 + ...
                      d0(N2C*Gx(:,pindx.lbP))*C2P_Q10];

            Cxx(:,kk) = mfactor(FD, tmp);
		end
		% bP Q10Photo
		if (par.opt_bP & par.opt_fStorage)
			kk = kk + 1;
            tmp = par.BIO.fStorage*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbP))*C2P_fStor; ...
                      (1-sigma)*d0(Gx(:,pindx.lbP))*C2P_fStor;...
                      sigma*d0(Gx(:,pindx.lbP))*C2P_fStor;...
                      d0((1-sigma)*RR*Gx(:,pindx.lbP))*C2P_fStor; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lbP))*C2P_fStor + ...
                      d0(N2C*Gx(:,pindx.lbP))*C2P_fStor];

            Cxx(:,kk) = mfactor(FD, tmp);
		end
% alpha
        % alpha bC_T
        if (par.opt_alpha & par.opt_bC_T)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % alpha bC
        if (par.opt_alpha & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % alpha d
        if (par.opt_alpha & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lalpha); ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % alpha kC_T
        if (par.opt_alpha & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lalpha)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % alpha kdC
        if (par.opt_alpha & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   -N2C*kC_kdC*DOCx(:,pindx.lalpha)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % alpha R_Si
        if (par.opt_alpha & par.opt_R_Si)
            kk  = kk + 1;
            tmp = [-d0((1-sigma)*RR_Si*Gx(:,pindx.lalpha))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_Si*Gx(:,pindx.lalpha))*C2P; ...
                   d0(-2*(1-sigma)*RR_Si*Gx(:,pindx.lalpha))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % alpha rR
        if (par.opt_alpha & par.opt_rR)
            kk  = kk + 1;
            tmp = [-d0((1-sigma)*RR_rR*Gx(:,pindx.lalpha))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_rR*Gx(:,pindx.lalpha))*C2P; ...
                   d0(-2*(1-sigma)*RR_rR*Gx(:,pindx.lalpha))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % alpha cc
        if (par.opt_alpha & par.opt_cc)
            kk  = kk + 1;
            tmp = cc*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lalpha))*C2P_cc; ...
                      (1-sigma)*d0(Gx(:,pindx.lalpha))*C2P_cc; ...
                      sigma*d0(Gx(:,pindx.lalpha))*C2P_cc; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lalpha))*C2P_cc; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lalpha))*C2P_cc + ...
                      d0(N2C*Gx(:,pindx.lalpha))*C2P_cc];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % alpha dd
        if (par.opt_alpha & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lalpha))*C2P_dd; ...
                      (1-sigma)*d0(Gx(:,pindx.lalpha))*C2P_dd; ...
                      sigma*d0(Gx(:,pindx.lalpha))*C2P_dd; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lalpha))*C2P_dd; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lalpha))*C2P_dd + ...
                      d0(N2C*Gx(:,pindx.lalpha))*C2P_dd];

            Cxx(:,kk) = mfactor(FD, tmp);
        end
	% alpha +cell model
		% alpha Q10Photo
		if (par.opt_alpha & par.opt_Q10Photo)
			kk = kk + 1;
			tmp = par.BIO.Q10Photo*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lalpha))*C2P_Q10; ...
                      (1-sigma)*d0(Gx(:,pindx.lalpha))*C2P_Q10; ...
                      sigma*d0(Gx(:,pindx.lalpha))*C2P_Q10; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lalpha))*C2P_Q10; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lalpha))*C2P_Q10 + ...
                      d0(N2C*Gx(:,pindx.lalpha))*C2P_Q10];

            Cxx(:,kk) = mfactor(FD, tmp);
		end

		% alpha fStorage
		if (par.opt_alpha & par.opt_fStorage)
			kk = kk + 1;
			tmp = par.BIO.Q10Photo*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lalpha))*C2P_fStor; ...
                      (1-sigma)*d0(Gx(:,pindx.lalpha))*C2P_fStor; ...
                      sigma*d0(Gx(:,pindx.lalpha))*C2P_fStor; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lalpha))*C2P_fStor; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lalpha))*C2P_fStor + ...
                      d0(N2C*Gx(:,pindx.lalpha))*C2P_fStor];

            Cxx(:,kk) = mfactor(FD, tmp);
		end

% beta
        % beta bC_T
        if (par.opt_beta & par.opt_bC_T)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % beta bC
        if (par.opt_beta & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % beta d
        if (par.opt_beta & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lbeta); ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % beta kC_T
        if (par.opt_beta & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lbeta)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % beta kdC
        if (par.opt_beta & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   -N2C*kC_kdC*DOCx(:,pindx.lbeta)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % beta R_Si
        if (par.opt_beta & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigma)*RR_Si*Gx(:,pindx.lbeta))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_Si*Gx(:,pindx.lbeta))*C2P; ...
                   d0(-2*(1-sigma)*RR_Si*Gx(:,pindx.lbeta))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % beta rR
        if (par.opt_beta & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigma)*RR_rR*Gx(:,pindx.lbeta))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigma)*RR_rR*Gx(:,pindx.lbeta))*C2P; ...
                   d0(-2*(1-sigma)*RR_rR*Gx(:,pindx.lbeta))*C2P];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % beta cc
        if (par.opt_beta & par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbeta))*C2P_cc; ...
                      (1-sigma)*d0(Gx(:,pindx.lbeta))*C2P_cc; ...
                      sigma*d0(Gx(:,pindx.lbeta))*C2P_cc; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lbeta))*C2P_cc; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lbeta))*C2P_cc + ...
                      d0(N2C*Gx(:,pindx.lbeta))*C2P_cc];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % beta dd
        if (par.opt_beta & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbeta))*C2P_dd; ...
                      (1-sigma)*d0(Gx(:,pindx.lbeta))*C2P_dd; ...
                      sigma*d0(Gx(:,pindx.lbeta))*C2P_dd; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lbeta))*C2P_dd; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lbeta))*C2P_dd + ...
                      d0(N2C*Gx(:,pindx.lbeta))*C2P_dd];

            Cxx(:,kk) = mfactor(FD, tmp);
        end
	% beta + cell model
		% beta Q10Photo
		if (par.opt_beta & par.opt_Q10Photo)
			kk = kk + 1;
			tmp = par.BIO.Q10Photo*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbeta))*C2P_Q10; ...
                      (1-sigma)*d0(Gx(:,pindx.lbeta))*C2P_Q10; ...
                      sigma*d0(Gx(:,pindx.lbeta))*C2P_Q10; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lbeta))*C2P_Q10; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lbeta))*C2P_Q10 + ...
                      d0(N2C*Gx(:,pindx.lbeta))*C2P_Q10];

            Cxx(:,kk) = mfactor(FD, tmp);
		end
		% beta Q10Photo
		if (par.opt_beta & par.opt_fStorage)
			kk = kk + 1;
			tmp = par.BIO.fStorage*[-d0((I+(1-sigma)*RR)*Gx(:,pindx.lbeta))*C2P_fStor; ...
                      (1-sigma)*d0(Gx(:,pindx.lbeta))*C2P_fStor; ...
                      sigma*d0(Gx(:,pindx.lbeta))*C2P_fStor; ...
                      d0((1-sigma)*RR*Gx(:,pindx.lbeta))*C2P_fStor; ...
                      d0(-2*(1-sigma)*RR*Gx(:,pindx.lbeta))*C2P_fStor + ...
                      d0(N2C*Gx(:,pindx.lbeta))*C2P_fStor];

            Cxx(:,kk) = mfactor(FD, tmp);
		end

        % C model only parameters
        % bC_T bC_T
        if (par.opt_bC_T)
            kk = kk + 1;
            [~,~,Hout] = buildPFD(par,'POC');
            PFD_bm_bm = Hout.PFD_bm_bm;
            par.PFD_bm_bm = PFD_bm_bm;
            tmp = [Z ; ...
                   -PFD_bm_bm*POC-2*PFD_bm*POCx(:,pindx.bC_T);
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC_T bC
        if (par.opt_bC_T & par.opt_bC)
            kk = kk + 1;
            [~,~,Hout] = buildPFD(par,'POC');
            PFD_bm_bb = Hout.PFD_bm_bb;
            par.PFD_bm_bb = PFD_bm_bb;
            tmp =  [Z ; ...
                    [-bC*PFD_bm_bb*POC - ...
                     PFD_bm*POCx(:,pindx.lbC) - ...
                     bC*PFD_bb*POCx(:,pindx.bC_T)];
                    Z; Z; Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC_T d
        if (par.opt_bC_T & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.ld); ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.bC_T); ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC_T kC_T
        if (par.opt_bC_T & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.bC_T) ; ...
                   -PFD_bm*POCx(:,pindx.kC_T); ...
                   -kC_kC_T*DOCx(:,pindx.bC_T) ; ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.bC_T)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC_T kdC
        if (par.opt_bC_T & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.bC_T) ; ...
                   -PFD_bm*POCx(:,pindx.lkdC); ...
                   -kC_kdC*DOCx(:,pindx.bC_T) ; ...
                   Z ; ...
                   -N2C*kC_kdC*DOCx(:,pindx.bC_T) ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC_T R_Si
        if (par.opt_bC_T & par.opt_R_Si)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.R_Si); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC_T rR
        if (par.opt_bC_T & par.opt_rR)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lrR); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC_T cc
        if (par.opt_bC_T & par.opt_cc)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lcc); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC_T dd
        if (par.opt_bC_T & par.opt_dd)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.ldd); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC bC
        if (par.opt_bC)
            kk = kk + 1;
            [~,~,Hout] = buildPFD(par,'POC');
            PFD_bb_bb = Hout.PFD_bb_bb;
            par.PFD_bb_bb = PFD_bb_bb;
            tmp = bC*[Z; ...
                      -PFD_bb*POC-bC*PFD_bb_bb*POC-2* ...
                      PFD_bb*POCx(:,pindx.lbC); ...
                      Z ; ...
                      Z ; ...
                      Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC d
        if (par.opt_bC & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.ld); ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lbC); ...
                  Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC kC_T
        if (par.opt_bC & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lbC); ...
                   -bC*PFD_bb*POCx(:,pindx.kC_T); ...
                   -kC_kC_T*DOCx(:,pindx.lbC); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lbC)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC kdC
        if (par.opt_bC & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.lbC); ...
                   -bC*PFD_bb*POCx(:,pindx.lkdC); ...
                   -kC_kdC*DOCx(:,pindx.lbC); ...
                   Z; ...
                   -N2C*kC_kdC*DOCx(:,pindx.lbC)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC R_Si
        if (par.opt_bC & par.opt_R_Si)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.R_Si); ...
                      Z ; ...
                      Z ; ...
                      Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC rR
        if (par.opt_bC & par.opt_rR)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.lrR); ...
                      Z ; ...
                      Z ; ...
                      Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC cc
        if (par.opt_bC & par.opt_cc)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.lcc); ...
                      Z ; ...
                      Z ; ...
                      Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % bC dd
        if (par.opt_bC & par.opt_dd)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.ldd); ...
                      Z ; ...
                      Z ; ...
                      Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % d d
        if (par.opt_d & par.opt_d)
            kk = kk + 1;
            [~,~,Hout] = buildPFD(par,'PIC');
            PFD_d_d = Hout.PFD_d_d;
            par.PFD_d_d = PFD_d_d;
            tmp = d*[Z ; ...
                     Z ; ...
                     Z ; ...
                     [-PFD_d*PIC - d*PFD_d_d*PIC + ...
                      -2*PFD_d*PICx(:,pindx.ld)]; ...
                    Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % d kC_T
        if (par.opt_d & par.opt_kC_T)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.ld); ...
                   Z
                   -kC_kC_T*DOCx(:,pindx.ld); ...
                   -d*PFD_d*PICx(:,pindx.kC_T); ...
                   -N2C*kC_kC_T*DOCx(:,pindx.ld)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % d kdC
        if (par.opt_d & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kdC*DOCx(:,pindx.ld); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.ld); ...
                   -d*PFD_d*PICx(:,pindx.lkdC); ...
                   -N2C*kC_kdC*DOCx(:,pindx.ld)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % d R_Si
        if (par.opt_d & par.opt_R_Si)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.R_Si); ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % d rR
        if (par.opt_d & par.opt_rR)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lrR); ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % d cc
        if (par.opt_d & par.opt_cc)
            kk = kk + 1;
            tmp = d*[Z; ...
                     Z; ...
                     Z; ...
                     -PFD_d*PICx(:,pindx.lcc); ...
                     Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % d dd
        if (par.opt_d & par.opt_dd)
            kk = kk + 1;
            tmp = d*[Z ; ...
                     Z ; ...
                     Z ; ...
                     -PFD_d*PICx(:,pindx.ldd); ...
                     Z ] ;

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kC_T kC_T
        if (par.opt_kC_T)
            kk = kk + 1;
            tmp = [2*kC_kC_T*DOCx(:,pindx.kC_T); ...
                   Z ; ...
                   -2*kC_kC_T*DOCx(:,pindx.kC_T); ...
                   Z ; ...
                   -2*N2C*kC_kC_T*DOCx(:,pindx.kC_T) ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kC_T kdC
        if (par.opt_kC_T & par.opt_kdC)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lkdC)] + ...
                  [kC_kdC*DOCx(:,pindx.kC_T); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.kC_T); ...
                   Z ; ...
                   -N2C*kC_kdC*DOCx(:,pindx.kC_T)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kC_T R_Si
        if (par.opt_kC_T & par.opt_R_Si)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.R_Si)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kC_T rR
        if (par.opt_kC_T & par.opt_rR)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lrR)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kC_T cc
        if (par.opt_kC_T & par.opt_cc)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lcc)] ;

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kC_T dd
        if (par.opt_kC_T & par.opt_dd)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.ldd)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdC kdC
        if (par.opt_kdC)
            kk = kk + 1;
            tmp = kC_kdC*[DOC + 2*DOCx(:,pindx.lkdC); ...
                          Z ; ...
                          -DOC - 2*DOCx(:,pindx.lkdC); ...
                          Z ; ...
                          -N2C*(DOC + 2*DOCx(:,pindx.lkdC))];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdC R_Si
        if (par.opt_kdC & par.opt_R_Si)
            kk = kk + 1;
            tmp = kC_kdC*[DOCx(:,pindx.R_Si); ...
                          Z ; ...
                          -DOCx(:,pindx.R_Si); ...
                          Z ; ...
                          -N2C*DOCx(:,pindx.R_Si)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdC rR
        if (par.opt_kdC & par.opt_rR)
            kk = kk + 1;
            tmp = kC_kdC*[DOCx(:,pindx.lrR); ...
                          Z ; ...
                          -DOCx(:,pindx.lrR); ...
                          Z ; ...
                          -N2C*DOCx(:,pindx.lrR)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdC cc
        if (par.opt_kdC & par.opt_cc)
            kk = kk + 1;
            tmp = kC_kdC*[DOCx(:,pindx.lcc); ...
                          Z ; ...
                          -DOCx(:,pindx.lcc); ...
                          Z ; ...
                          -N2C*DOCx(:,pindx.lcc)] ;

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % kdC dd
        if (par.opt_kdC & par.opt_dd)
            kk = kk + 1;
            tmp = kC_kdC*[DOCx(:,pindx.ldd); ...
                          Z; ...
                          -DOCx(:,pindx.ldd); ...
                          Z ; ...
                          -N2C*DOCx(:,pindx.ldd)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end
        %%%%%%
        % R_Si R_Si
        if (par.opt_R_Si)
            kk = kk + 1;
            tmp = [Z ; Z ; Z ; Z ; Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % R_Si rR
        if (par.opt_R_Si & par.opt_rR)
            kk = kk + 1;
            tmp = [Z ; Z ; Z ; Z ; Z];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % R_Si cc
        if (par.opt_R_Si & par.opt_cc)
            kk = kk + 1;
            tmp = [-cc*(1-sigma)*RR_Si*(G*C2P_cc); ...
                   Z ; ...
                   Z ; ...
                   cc*(1-sigma)*RR_Si*(G*C2P_cc); ...
                   -2*cc*(1-sigma)*RR_Si*(G*C2P_cc)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % R_Si dd
        if (par.opt_R_Si & par.opt_dd)
            kk = kk + 1;
            tmp = [-dd*(1-sigma)*RR_Si*(G*C2P_dd); ...
                   Z; ...
                   Z; ...
                   dd*(1-sigma)*RR_Si*(G*C2P_dd); ...
                   -2*dd*(1-sigma)*RR_Si*(G*C2P_dd)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % rR rR
        if (par.opt_rR)
            kk = kk + 1;
            tmp = [-(1-sigma)*RR_rR*(G*C2P); ...
                   Z ; ...
                   Z ; ...
                   (1-sigma)*RR_rR*(G*C2P); ...
                   -2*(1-sigma)*RR_rR*(G*C2P)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % rR cc
        if (par.opt_rR & par.opt_cc)
            kk = kk + 1;
            tmp = [-cc*(1-sigma)*RR_rR*(G*C2P_cc); ...
                   Z ; ...
                   Z ; ...
                   cc*(1-sigma)*RR_rR*(G*C2P_cc); ...
                   -2*cc*(1-sigma)*RR_rR*(G*C2P_cc)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % rR dd
        if (par.opt_rR & par.opt_dd)
            kk = kk + 1;
            tmp = [-dd*(1-sigma)*RR_rR*(G*C2P_dd); ...
                   Z; ...
                   Z; ...
                   dd*(1-sigma)*RR_rR*(G*C2P_dd); ...
                   -2*dd*(1-sigma)*RR_rR*(G*C2P_dd)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        %%%%%%%
        % cc cc
        if (par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-(I+(1-sigma)*RR)*(G*(C2P_cc+cc*C2P_cc_cc)); ...
                      (1-sigma)*G*(C2P_cc+cc*C2P_cc_cc); ...
                      sigma*G*(C2P_cc+cc*C2P_cc_cc); ...
                      (1-sigma)*RR*(G*(C2P_cc+cc*C2P_cc_cc)); ...
                      -2*(1-sigma)*RR*(G*(C2P_cc+cc*C2P_cc_cc)) + ...
                      N2C*G*(C2P_cc+cc*C2P_cc_cc)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % cc dd
        if (par.opt_cc & par.opt_dd)
            kk = kk + 1;
            tmp = cc*dd*[-(I+(1-sigma)*RR)*(G*C2P_cc_dd); ...
                         (1-sigma)*G*C2P_cc_dd; ...
                         sigma*G*C2P_cc_dd; ...
                         (1-sigma)*RR*(G*C2P_cc_dd); ...
                         -2*(1-sigma)*RR*(G*C2P_cc_dd) + ...
                         N2C*G*C2P_cc_dd];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

        % dd dd
        if (par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-(I+(1-sigma)*RR)*(G*(C2P_dd+dd*C2P_dd_dd)); ...
                      (1-sigma)*G*(C2P_dd+dd*C2P_dd_dd); ...
                      sigma*G*(C2P_dd+dd*C2P_dd_dd); ...
                      (1-sigma)*RR*(G*(C2P_dd+dd*C2P_dd_dd)); ...
                      -2*(1-sigma)*RR*(G*(C2P_dd+dd*C2P_dd_dd)) + ...
                      N2C*G*(C2P_dd+dd*C2P_dd_dd)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

	%%%%% Cmodel + Cell Model %%%%%
		% bC_T Q10Photo
        if (par.opt_bC_T & par.opt_Q10Photo)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lQ10Photo); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% bC_T fStorage
        if (par.opt_bC_T & par.opt_fStorage)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lfStorage); ...
                   Z ; ...
                   Z ; ...
                   Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% bC Q10Photo
        if (par.opt_bC & par.opt_Q10Photo)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.lQ10Photo); ...
                      Z ; ...
                      Z ; ...
                      Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% bC fStorage
        if (par.opt_bC & par.opt_fStorage)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.lfStorage); ...
                      Z ; ...
                      Z ; ...
                      Z ];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% d Q10Photo
        if (par.opt_d & par.opt_Q10Photo)
            kk = kk + 1;
            tmp = d*[Z ; ...
                     Z ; ...
                     Z ; ...
                     -PFD_d*PICx(:,pindx.lQ10Photo); ...
                     Z ] ;

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% d fStorage
        if (par.opt_d & par.opt_fStorage)
            kk = kk + 1;
            tmp = d*[Z ; ...
                     Z ; ...
                     Z ; ...
                     -PFD_d*PICx(:,pindx.lfStorage); ...
                     Z ] ;

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% kC_T Q10Photo
        if (par.opt_kC_T & par.opt_Q10Photo)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lQ10Photo); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lQ10Photo); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lQ10Photo)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% kC_T fStorage
        if (par.opt_kC_T & par.opt_fStorage)
            kk = kk + 1;
            tmp = [kC_kC_T*DOCx(:,pindx.lfStorage); ...
                   Z ; ...
                   -kC_kC_T*DOCx(:,pindx.lfStorage); ...
                   Z ; ...
                   -N2C*kC_kC_T*DOCx(:,pindx.lfStorage)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% kdC Q10Photo
        if (par.opt_kdC & par.opt_Q10Photo)
            kk = kk + 1;
            tmp = kC_kdC*[DOCx(:,pindx.lQ10Photo); ...
                          Z; ...
                          -DOCx(:,pindx.lQ10Photo); ...
                          Z ; ...
                          -N2C*DOCx(:,pindx.lQ10Photo)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% kdC fStorage
        if (par.opt_kdC & par.opt_fStorage)
            kk = kk + 1;
            tmp = kC_kdC*[DOCx(:,pindx.lfStorage); ...
                          Z; ...
                          -DOCx(:,pindx.lfStorage); ...
                          Z ; ...
                          -N2C*DOCx(:,pindx.lfStorage)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% R_Si Q10Photo
        if (par.opt_R_Si & par.opt_Q10Photo)
            kk = kk + 1;
            tmp = [-par.BIO.Q10Photo*(1-sigma)*RR_Si*(G*C2P_Q10); ...
                   Z; ...
                   Z; ...
                   par.BIO.Q10Photo*(1-sigma)*RR_Si*(G*C2P_Q10); ...
                   -2*par.BIO.Q10Photo*(1-sigma)*RR_Si*(G*C2P_Q10)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% R_Si fStorage
        if (par.opt_R_Si & par.opt_fStorage)
            kk = kk + 1;
            tmp = [-par.BIO.fStorage*(1-sigma)*RR_Si*(G*C2P_fStor); ...
                   Z; ...
                   Z; ...
                   par.BIO.fStorage*(1-sigma)*RR_Si*(G*C2P_fStor); ...
                   -2*par.BIO.fStorage*(1-sigma)*RR_Si*(G*C2P_fStor)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% rR Q10Photo
        if (par.opt_rR & par.opt_Q10Photo)
            kk = kk + 1;
            tmp = [-par.BIO.Q10Photo*(1-sigma)*RR_rR*(G*C2P_Q10); ...
                   Z; ...
                   Z; ...
                   par.BIO.Q10Photo*(1-sigma)*RR_rR*(G*C2P_Q10); ...
                   -2*par.BIO.Q10Photo*(1-sigma)*RR_rR*(G*C2P_Q10)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% rR fStorage
        if (par.opt_rR & par.opt_fStorage)
            kk = kk + 1;
            tmp = [-par.BIO.fStorage*(1-sigma)*RR_rR*(G*C2P_fStor); ...
                   Z; ...
                   Z; ...
                   par.BIO.fStorage*(1-sigma)*RR_rR*(G*C2P_fStor); ...
                   -2*par.BIO.fStorage*(1-sigma)*RR_rR*(G*C2P_fStor)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

	% Cell model only
		% Q10Photo Q10Photo
        if (par.opt_Q10Photo)
			C2P_Q10_Q10 = par.CellOut.d2C2P_dQ10Photo2(iwet);
            kk = kk + 1;
            tmp = par.BIO.Q10Photo*[-(I+(1-sigma)*RR)*(G*(C2P_Q10+par.BIO.Q10Photo*C2P_Q10_Q10)); ...
                      (1-sigma)*G*(C2P_Q10+par.BIO.Q10Photo*C2P_Q10_Q10); ...
                      sigma*G*(C2P_Q10+par.BIO.Q10Photo*C2P_Q10_Q10); ...
                      (1-sigma)*RR*(G*(C2P_Q10+par.BIO.Q10Photo*C2P_Q10_Q10)); ...
                      -2*(1-sigma)*RR*(G*(C2P_Q10+par.BIO.Q10Photo*C2P_Q10_Q10)) + ...
                      N2C*G*(C2P_Q10+par.BIO.Q10Photo*C2P_Q10_Q10)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end
		% Q10Photo fStorage
        if (par.opt_Q10Photo & par.opt_fStorage)
			C2P_Q10_fStor = par.CellOut.d2C2P_dQ10Photo_dfStorage(iwet);
            kk = kk + 1;
            tmp = par.BIO.Q10Photo*par.BIO.fStorage*[-(I+(1-sigma)*RR)*(G*C2P_Q10_fStor); ...
                         (1-sigma)*G*C2P_Q10_fStor; ...
                         sigma*G*C2P_Q10_fStor; ...
                         (1-sigma)*RR*(G*C2P_Q10_fStor); ...
                         -2*(1-sigma)*RR*(G*C2P_Q10_fStor) + ...
                         N2C*G*C2P_Q10_fStor];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

		% fStorage fStorage
        if (par.opt_fStorage)
			C2P_fStor_fStor = par.CellOut.d2C2P_dfStorage2(iwet);
            kk = kk + 1;
            tmp = par.BIO.fStorage*[-(I+(1-sigma)*RR)*(G*(C2P_fStor+par.BIO.fStorage*C2P_fStor_fStor)); ...
                      (1-sigma)*G*(C2P_fStor+par.BIO.fStorage*C2P_fStor_fStor); ...
                      sigma*G*(C2P_fStor+par.BIO.fStorage*C2P_fStor_fStor); ...
                      (1-sigma)*RR*(G*(C2P_fStor+par.BIO.fStorage*C2P_fStor_fStor)); ...
                      -2*(1-sigma)*RR*(G*(C2P_fStor+par.BIO.fStorage*C2P_fStor_fStor)) + ...
                      N2C*G*(C2P_fStor+par.BIO.fStorage*C2P_fStor_fStor)];

            Cxx(:,kk) = mfactor(FD, tmp);
        end

    end
end
